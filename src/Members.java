
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nisal
 */
public class Members extends javax.swing.JInternalFrame {
    
    Connection conn ;
    PreparedStatement pst = null;
    ResultSet rs = null;
    String bday, gen, mo;
  
    /**
     * Creates new form Members
     */
    public Members() {
        initComponents();
        conn = JDBC.ConnectDB();
        autoId();
        loadTable();
        changeIssueStatus();
        
        this.setBorder(null);
        BasicInternalFrameUI bui = (BasicInternalFrameUI)this.getUI();
        bui.setNorthPane(null);       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnadd = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        txtname = new javax.swing.JTextField();
        txtnic = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtoccu = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txttele = new javax.swing.JTextField();
        combotype = new javax.swing.JComboBox<>();
        txtbday = new javax.swing.JTextField();
        txtgender = new javax.swing.JTextField();
        txtaddress = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        txtsearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblmems = new javax.swing.JTable();
        combostatus = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnclear = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnhistory = new javax.swing.JButton();
        btnpending = new javax.swing.JButton();
        btnall = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btndeleted = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setResizable(true);
        setPreferredSize(new java.awt.Dimension(898, 487));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnadd.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        btnadd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnadd.setText("   Add  ");
        btnadd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });

        btndelete.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.gif"))); // NOI18N
        btndelete.setText("  Delete");
        btndelete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnupdate.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        btnupdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png"))); // NOI18N
        btnupdate.setText("  Update");
        btnupdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnadd, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(btndelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnupdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnadd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnupdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btndelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(240, 240, 240));

        jLabel5.setBackground(new java.awt.Color(220, 220, 220));
        jLabel5.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel5.setText("Member ID");

        jLabel6.setBackground(new java.awt.Color(220, 220, 220));
        jLabel6.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel6.setText("Name");

        jLabel7.setBackground(new java.awt.Color(220, 220, 220));
        jLabel7.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel7.setText("NIC");

        txtid.setEditable(false);
        txtid.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtid.setPreferredSize(new java.awt.Dimension(180, 50));
        txtid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtidActionPerformed(evt);
            }
        });

        txtname.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtname.setPreferredSize(new java.awt.Dimension(180, 50));
        txtname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnameActionPerformed(evt);
            }
        });

        txtnic.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtnic.setPreferredSize(new java.awt.Dimension(180, 50));
        txtnic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnicActionPerformed(evt);
            }
        });
        txtnic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtnicKeyReleased(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(220, 220, 220));
        jLabel8.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel8.setText("Birthday");

        jLabel14.setBackground(new java.awt.Color(220, 220, 220));
        jLabel14.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel14.setText("Gender");

        jLabel15.setBackground(new java.awt.Color(220, 220, 220));
        jLabel15.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel15.setText("Occupation");

        txtoccu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtoccu.setPreferredSize(new java.awt.Dimension(180, 50));
        txtoccu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtoccuActionPerformed(evt);
            }
        });

        jLabel16.setBackground(new java.awt.Color(220, 220, 220));
        jLabel16.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel16.setText("Telephone");

        jLabel17.setBackground(new java.awt.Color(220, 220, 220));
        jLabel17.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel17.setText("Address");

        jLabel18.setBackground(new java.awt.Color(220, 220, 220));
        jLabel18.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel18.setText("Member Type");

        txttele.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txttele.setPreferredSize(new java.awt.Dimension(180, 50));

        combotype.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        combotype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Child", "Regular", "Senior" }));
        combotype.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        combotype.setPreferredSize(new java.awt.Dimension(180, 50));
        combotype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combotypeActionPerformed(evt);
            }
        });

        txtbday.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtbday.setPreferredSize(new java.awt.Dimension(180, 50));
        txtbday.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtbdayMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtbdayMousePressed(evt);
            }
        });
        txtbday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbdayActionPerformed(evt);
            }
        });

        txtgender.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtgender.setPreferredSize(new java.awt.Dimension(180, 50));
        txtgender.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtgenderMousePressed(evt);
            }
        });
        txtgender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgenderActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtaddress.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(txtnic, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtoccu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(combotype, 0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(txtbday, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(txttele, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(txtgender, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(txtaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5))
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtbday, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txttele, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(txtgender, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel17))
                    .addComponent(txtaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7))
                    .addComponent(txtnic, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel15))
                    .addComponent(txtoccu, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(combotype, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setAutoscrolls(true);

        txtsearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsearchActionPerformed(evt);
            }
        });
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Search");

        jScrollPane3.setBackground(new java.awt.Color(205, 205, 205));
        jScrollPane3.setForeground(new java.awt.Color(40, 46, 88));

        tblmems.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        tblmems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblmems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblmems);

        jScrollPane3.setViewportView(jScrollPane1);

        combostatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Borrowed", "Eligible" }));
        combostatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        combostatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combostatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(combostatus, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(combostatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new java.awt.Color(220, 220, 220));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Members");

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnclear.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        btnclear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear.png"))); // NOI18N
        btnclear.setText("  Clear");
        btnclear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnclear, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnclear, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnhistory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnhistory.setText("Borrow History");
        btnhistory.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhistoryActionPerformed(evt);
            }
        });

        btnpending.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnpending.setText("Pending Members");
        btnpending.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnpending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpendingActionPerformed(evt);
            }
        });

        btnall.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btnall.setText("All Members");
        btnall.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnallActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        jLabel3.setText("Reports");

        btndeleted.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btndeleted.setText("Deleted Members");
        btndeleted.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btndeleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeletedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnhistory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnpending, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnall, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(btndeleted, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnhistory, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnpending, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnall, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btndeleted, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
        // TODO add your handling code here:
            
        String memberid = txtid.getText();
        String name = txtname.getText();
        String nic = txtnic.getText();
        String birthday = txtbday.getText();
        String gender = txtgender.getText();
        String occupation = txtoccu.getText();
        String telephone = txttele.getText();
        String address = jTextArea1.getText();
        String type = combotype.getSelectedItem().toString();
        
        LocalDate today = LocalDate.now();

        try{
            
             if (validateFields() && validateAdd()){
            
            String sql = "INSERT INTO `member`(`memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type`,`status`,`registereddate`) VALUES('"+memberid+"','"+name+"','"+nic+"','"+birthday+"','"+gender+"','"+occupation+"','"+telephone+"','"+address+"','"+type+"','eligible','"+today+"')";
            pst = conn.prepareStatement(sql);
            pst.execute();
            
            rs.close();
            pst.close();
            
            JOptionPane.showMessageDialog(rootPane, "Member Added Successfully!");
            
             clearField();
             }
        
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(rootPane, e);
        
        }
       autoId();
       loadTable();
            
    }//GEN-LAST:event_btnaddActionPerformed
    
    private void loadTable(){
    
        try{
        
            String sql ="SELECT `memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type`, `status` FROM `member`";
            pst = conn.prepareStatement(sql);
            rs=pst.executeQuery();
            tblmems.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
            rs.close();
            pst.close();
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(rootPane, e);
        
        }
    }
     private void autoId(){
    
        try{
            
            String sql="SELECT `memberid` FROM `member` ORDER BY memberid DESC LIMIT 1";
            
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if(rs.next()){
            
                String rnno = rs.getString("memberid");
                int co = rnno.length();
                String txt = rnno.substring(0,2);
                String num = rnno.substring(2, co);
                int n=Integer.parseInt(num);
                n++;
                String snum = Integer.toString(n);
                String ftxt = txt+snum;
                txtid.setText(ftxt);
            }
            else
            {
                txtid.setText("MI1000");
            
            }
            
            rs.close();
            pst.close();
        
        }catch(Exception e){
        
            JOptionPane.showMessageDialog(rootPane, e);
        }
    
    }
    
    private void clearField(){
        
        txtid.setText("");
        txtname.setText("");
        txtnic.setText("");
        txtbday.setText("");
        txtgender.setText("");
        txtoccu.setText("");
        txttele.setText("");
        jTextArea1.setText("");
        combotype.setSelectedIndex(0);
        
        autoId();
    
    }
     
    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
         DefaultTableModel dtm = (DefaultTableModel) tblmems.getModel();
        int row = tblmems.getSelectedRow();
 
        if (row != -1) 
        {
            String verify = tblmems.getValueAt(tblmems.getSelectedRow(), 9).toString();
          
            if("eligible".equals(verify)){
        
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to delete?", "Delete", JOptionPane.YES_NO_OPTION); 
            if (confirm == 0) 
            {
                try
                {
                   DeletedMembers();

                    String sql ="DELETE FROM `member` WHERE memberid ='"+txtid.getText()+"'";
                    pst = conn.prepareStatement(sql);
                    pst.execute();
                    
                    rs.close();
                    pst.close();
                    
                    JOptionPane.showMessageDialog(rootPane, "Successfully Deleted");
                    loadTable();

                }
                catch (Exception e)
                {
                          JOptionPane.showMessageDialog(null, "Failed" + e);
                }
              clearField();
              autoId();
            }
            
            }else{
                
                JOptionPane.showMessageDialog(null, "You can't delete members whose status is 'borrowed'");
            
            }
        }
        else
        {
             JOptionPane.showMessageDialog(null, "Please Select a Row for Delete");
        }
    }//GEN-LAST:event_btndeleteActionPerformed

    private void tblmemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmemsMouseClicked

        
        DefaultTableModel tmodel = (DefaultTableModel)tblmems.getModel();
        int selectrowindex = tblmems.getSelectedRow();
        txtid.setText(tmodel.getValueAt(selectrowindex, 0).toString());
        txtname.setText(tmodel.getValueAt(selectrowindex, 1).toString());
        txtnic.setText(tmodel.getValueAt(selectrowindex, 2).toString());
        txtbday.setText(tmodel.getValueAt(selectrowindex, 3).toString());
        txtgender.setText(tmodel.getValueAt(selectrowindex, 4).toString());
        txtoccu.setText(tmodel.getValueAt(selectrowindex, 5).toString());
        txttele.setText(tmodel.getValueAt(selectrowindex, 6).toString());
        jTextArea1.setText(tmodel.getValueAt(selectrowindex, 7).toString());
        combotype.setSelectedItem(tmodel.getValueAt(selectrowindex, 8).toString());

        // TODO add your handling code here:
    }//GEN-LAST:event_tblmemsMouseClicked

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:
        
        String memberid = txtid.getText();
        String name = txtname.getText();
        String nic = txtnic.getText();
        String birthday = txtbday.getText();
        String gender = txtgender.getText();
        String occupation = txtoccu.getText();
        String telephone = txttele.getText();
        String address = jTextArea1.getText();
        String type = combotype.getSelectedItem().toString();
        
        DefaultTableModel dtm = (DefaultTableModel) tblmems.getModel();
        int row = tblmems.getSelectedRow();
        
           if (row != -1) 
        {
        
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to Update?", "Update", JOptionPane.YES_NO_OPTION); 
            if (confirm == 0) 
            {
                try
                {
                    if(validateFields()){
                    String sql = "UPDATE `member` SET `name`='"+name+"',`nic`='"+nic+"',`birthday`='"+birthday+"',`gender`='"+gender+"',`occupation`='"+occupation+"',`telephone`='"+telephone+"',`address`='"+address+"',`type`='"+type+"' WHERE memberid = '"+memberid+"'";
                    pst =conn.prepareStatement(sql);
                    pst.execute();
                    
                    rs.close();
                    pst.close();
                    JOptionPane.showMessageDialog(rootPane, "Successfully Updated");
                    }
                }
                catch (Exception e)
                {
                          JOptionPane.showMessageDialog(null, "Failed" + e);
                }
                loadTable();
                autoId();
                clearField();
            }
        }
            else
        {
             JOptionPane.showMessageDialog(null, "Please Select a Row for Update");
        }
        
    }//GEN-LAST:event_btnupdateActionPerformed

    private void combotypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combotypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combotypeActionPerformed

    private void txtoccuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtoccuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtoccuActionPerformed

    private void txtnicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnicActionPerformed

    private void txtnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnameActionPerformed

    private void txtidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtidActionPerformed

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
        // TODO add your handling code here:
       long count = 0;  

String search = txtsearch.getText();
        
                try {

                        String sql = "SELECT `memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type` FROM `member` WHERE `memberid` LIKE '%" + search + "%' "
                            + "OR `name` LIKE '%"+search+"%' OR `nic` LIKE '%"+search+"%'";
                        
                        pst = conn.prepareStatement(sql);
                         rs=pst.executeQuery();
                         tblmems.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
                         
                         rs.close();
                         pst.close();
                                             
            } catch (Exception e) {
                   
                    JOptionPane.showMessageDialog(null, e);
                
                      
          }       
    }//GEN-LAST:event_txtsearchKeyReleased

    private void txtsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsearchActionPerformed

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        // TODO add your handling code here:
        clearField();
    }//GEN-LAST:event_btnclearActionPerformed

    private void btnhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhistoryActionPerformed
        // TODO add your handling code here:
          
        String memberid = txtid.getText();
        String name = "";
        String rdate = "";
        String status = "";
        int count = 0;
              
         try
        {
         
              String sql="SELECT count(i.memberid) AS mcount FROM issue i LEFT JOIN `return` r ON i.`issueid` = r.`issueid` where i.memberid = '"+memberid+"'";
            
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
                if (rs.next())
                {
                   count = rs.getInt("mcount"); 
                  // count++;
               }
                
              rs.close();
              pst.close();
              
            } 
        catch (Exception e) 
        {
                
            JOptionPane.showMessageDialog(null, "Failed" + e);
        }
             
        if(count == 0){
            
            JOptionPane.showMessageDialog(null, "No records of history for this member");
        }
        else{
            
            try{
                
                String sql= "SELECT `name`, `registereddate`,`status` FROM `member` where memberid = '"+memberid+"'";
            
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                    while (rs.next())
                    {
                      
                       name = rs.getString("name");
                       rdate = rs.getString("registereddate");
                       status = rs.getString("status");
                   }

                  rs.close();
                  pst.close();
            
            
            }catch(Exception e){
            
                JOptionPane.showMessageDialog(rootPane, e);
            }
       
           try{ 

              JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\nisal\\Documents\\NetBeansProjects\\LibraryManagementSystem\\src\\reports\\BorrowHistory.jrxml");
              String sql ="SELECT i.`isbn`, i.`bookname`,i.`issuedate`,i.`duedate`, r.`returndate`,r.`fine` FROM `issue` i LEFT JOIN `return`r ON i.`issueid` = r.`issueid` WHERE i.`memberid`= '"+memberid+"' ORDER BY i.`issuedate` asc";
              JRDesignQuery newQuery = new JRDesignQuery();
              newQuery.setText(sql);
              jasdi.setQuery(newQuery);
              
              HashMap<String, Object> para = new HashMap<>();
              para.put("id", memberid);
              para.put("name", name);
              para.put("date", rdate);
              para.put("status", status);
              
              JasperReport js = JasperCompileManager.compileReport(jasdi);
              JasperPrint jp = JasperFillManager.fillReport(js,para, conn);
             // JasperViewer.viewReport(jp);
              JasperViewer jv = new JasperViewer( jp, false );
              jv.viewReport( jp, false );
             }catch(Exception e){

                 JOptionPane.showMessageDialog(rootPane, e);

             }
                  
        }
     
    }//GEN-LAST:event_btnhistoryActionPerformed

    private void btnpendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpendingActionPerformed
      
      String month ="";
       
      if(null != mo)switch (mo) {
            case "01" -> month = "January";
            case "02" -> month = "February";
            case "03" -> month = "March";
            case "04" -> month = "April";
            case "05" -> month = "May";
            case "06" -> month = "June";
            case "07" -> month = "July";
            case "08" -> month = "August";
            case "09" -> month = "September";
            case "10" -> month = "October";
            case "11" -> month = "November";
            case "12" -> month = "December";
            default -> {
          }
        }
        
        try{ 

              JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\nisal\\Documents\\NetBeansProjects\\LibraryManagementSystem\\src\\reports\\MonthlyPending.jrxml");
              String sql ="SELECT m.`memberid`, m.`name`, i .`bookname`, i.`issuedate`, i.`duedate`, m.`telephone`, m.`address` FROM `member` m,  `issue` i  WHERE i.`status` = 'contact' and m.`memberid` = i.`memberid` ORDER BY i.`issuedate` ASC";
              JRDesignQuery newQuery = new JRDesignQuery();
              newQuery.setText(sql);
              jasdi.setQuery(newQuery);
              
              HashMap<String, Object> para = new HashMap<>();
              para.put("month", month);
              JasperReport js = JasperCompileManager.compileReport(jasdi);
              JasperPrint jp = JasperFillManager.fillReport(js,para, conn);
             // JasperViewer.viewReport(jp);
              JasperViewer jv = new JasperViewer( jp, false );
              jv.viewReport( jp, false );
             }catch(Exception e){

                 JOptionPane.showMessageDialog(rootPane, e);

             }
         
    }//GEN-LAST:event_btnpendingActionPerformed

    private void btnallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnallActionPerformed
        // TODO add your handling code here:
        
          try{ 

              JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\nisal\\Documents\\NetBeansProjects\\LibraryManagementSystem\\src\\reports\\AllMembers.jrxml");
              String sql ="select `memberid`, `name`,`nic`, `birthday`,`gender`, `occupation`, `type`, `status`, `telephone`, `address`,`registereddate` from `member` order by `memberid` ASC";
              JRDesignQuery newQuery = new JRDesignQuery();
              newQuery.setText(sql);
              jasdi.setQuery(newQuery);
              
            //  HashMap<String, Object> para = new HashMap<>();
            //  para.put("month", month);
              JasperReport js = JasperCompileManager.compileReport(jasdi);
              JasperPrint jp = JasperFillManager.fillReport(js,null, conn);
             // JasperViewer.viewReport(jp);
              JasperViewer jv = new JasperViewer( jp, false );
              jv.viewReport( jp, false );
             }catch(Exception e){

                 JOptionPane.showMessageDialog(rootPane, e);

             }
        
         
    }//GEN-LAST:event_btnallActionPerformed

    private void txtnicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnicKeyReleased

    }//GEN-LAST:event_txtnicKeyReleased

    private void txtbdayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtbdayMouseClicked

       
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbdayMouseClicked

    private void txtbdayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtbdayMousePressed

         calculateDOB();
        
        txtbday.setText(bday);

        // TODO add your handling code here:
    }//GEN-LAST:event_txtbdayMousePressed

    private void txtgenderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtgenderMousePressed
        // TODO add your handling code here:
        
        calculateDOB();
        
        txtgender.setText(gen);
    }//GEN-LAST:event_txtgenderMousePressed

    private void txtbdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbdayActionPerformed

    private void txtgenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgenderActionPerformed

    private void combostatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combostatusActionPerformed
        // TODO add your handling code here:
        
        String status = combostatus.getSelectedItem().toString();
        
        if (status == "Borrowed"){
            
             try{
        
            String sql ="SELECT `memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type`, `status` FROM `member` WHERE `status` = 'borrowed'";
            pst = conn.prepareStatement(sql);
            rs=pst.executeQuery();
            tblmems.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
            rs.close();
            pst.close();
            
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(rootPane, e);
        
          } 
             
        }else if (status == "Eligible"){
            
             try{
        
            String sql ="SELECT `memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type`, `status` FROM `member` WHERE `status` = 'eligible'";
            pst = conn.prepareStatement(sql);
            rs=pst.executeQuery();
            tblmems.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
            rs.close();
            pst.close();
            
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(rootPane, e);
        
          }      
        }else{
            
             try{
        
            String sql ="SELECT `memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type`, `status` FROM `member`";
            pst = conn.prepareStatement(sql);
            rs=pst.executeQuery();
            tblmems.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
            rs.close();
            pst.close();
            
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(rootPane, e);
        
          }      
        
        }
            
            
    }//GEN-LAST:event_combostatusActionPerformed

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        // TODO add
        
  int a =  evt.getChanged().getWidth();
       int b = evt.getChanged().getHeight();
       this.setSize(a, b);
    }//GEN-LAST:event_formAncestorResized

    private void btndeletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeletedActionPerformed
        // TODO add your handling code here:
                LocalDate today = LocalDate.now();
        
       int month = today.getMonthValue();
       int year = today.getYear();
       String mont = "";
        switch (month) {
            case 1 -> {
                month = 12;
                year = year - 1;
            }
            
            default -> month = month - 1;
        }
        
     String  mon = String.format("%02d", month);
     String ym = year+"-"+mon;
       
       if(null != mon)switch (mon) {
            case "01" -> mont = "January";
            case "02" -> mont = "February";
            case "03" -> mont = "March";
            case "04" -> mont = "April";
            case "05" -> mont = "May";
            case "06" -> mont = "June";
            case "07" -> mont = "July";
            case "08" -> mont = "August";
            case "09" -> mont = "September";
            case "10" -> mont = "October";
            case "11" -> mont = "November";
            case "12" -> mont = "December";
            default -> {
                    }
        }
       
       try{ 

              JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\nisal\\Documents\\NetBeansProjects\\LibraryManagementSystem\\src\\reports\\DeletedMembers.jrxml");
              String sql ="SELECT * FROM `deletedmember` WHERE `deleteddate`LIKE '%" +ym+ "%' ";
              JRDesignQuery newQuery = new JRDesignQuery();
              newQuery.setText(sql);
              jasdi.setQuery(newQuery);
              
              HashMap<String, Object> para = new HashMap<>();
              para.put("month", mont);
              JasperReport js = JasperCompileManager.compileReport(jasdi);
              JasperPrint jp = JasperFillManager.fillReport(js,para, conn);
             // JasperViewer.viewReport(jp);
              JasperViewer jv = new JasperViewer( jp, false );
              jv.viewReport( jp, false );
             }catch(Exception e){

                 JOptionPane.showMessageDialog(rootPane, e);

             }
       
       
        
        
    }//GEN-LAST:event_btndeletedActionPerformed

      private void DeletedMembers(){
    
      try{
          
        String memberid = txtid.getText();
        String name = txtname.getText();
        String nic = txtnic.getText();
        String birthday = txtbday.getText();
        String gender = txtgender.getText();
        String occupation = txtoccu.getText();
        String telephone = txttele.getText();
        String address = jTextArea1.getText();
        String type = combotype.getSelectedItem().toString();
        
        LocalDate today = LocalDate.now();

            String sql = "INSERT INTO `deletedmember`(`memberid`, `name`, `nic`, `birthday`, `gender`, `occupation`, `telephone`, `address`, `type`,`status`,`registereddate`, `deleteddate`) VALUES('"+memberid+"','"+name+"','"+nic+"','"+birthday+"','"+gender+"','"+occupation+"','"+telephone+"','"+address+"','"+type+"',(SELECT `status` FROM `member` WHERE `memberid` = '"+memberid+"'), (SELECT `registereddate` FROM `member` WHERE `memberid` = '"+memberid+"'), '"+today+"')";
            pst = conn.prepareStatement(sql);
            pst.execute();
            
            rs.close();
            pst.close();
                    
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(rootPane, e);
        
        } 
    }
      
public void calculateDOB() 
   {
        String nic = txtnic.getText();
        
         if(nic.equalsIgnoreCase("")){
            
        }else{
              
        String ID = String.valueOf(nic.charAt(0) + String.valueOf(nic.charAt(1)));
        int Byear = Integer.valueOf(ID);
        
        if (Byear > 50) 
        {
            ID = "19" + ID;

        } else 
        {
            ID = "20" + ID;
        }

        String dob = String.valueOf(nic.charAt(2)) + String.valueOf(nic.charAt(3)) + String.valueOf(nic.charAt(4));
        int day = Integer.valueOf(dob);

        if (day > 500) 
        {
            gen = "Female";
            
            day -= 500;
        } else 
        {
            gen = "Male";
        }

        int year = Integer.valueOf(ID);
        if (0 != year % 4) 
        {
            if (day > 59) 
            {
                day--;
            }
        }
        
        if((day >= 367 && day <=500)||(day >= 867) || day == 000){
        
            JOptionPane.showMessageDialog(null, "Invalid NIC");
            bday = "";
            gen = "";
        }
        else{   
            
        LocalDate d = Year.of(year).atDay(day);
        DateTimeFormatter form = DateTimeFormatter.ofPattern("yyyy-MMM-dd");
        bday = d.format(form);
        
        }  
        
        }
    }

    public boolean validateAdd(){
        
        String nic = txtnic.getText();
        String exist = "";
        
         try
        {
         
              String sql="SELECT `nic` FROM `member` WHERE `nic` = '" + nic + "' GROUP BY `nic` HAVING COUNT(*) > '0'";
            
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
                while (rs.next())
                {
                    exist = rs.getString("nic");
                
                }
                
              rs.close();
              pst.close();
            } 
        catch (Exception e) 
        {
                
            JOptionPane.showMessageDialog(null, "Failed" + e);
        }
        if (exist != ""){
            
            JOptionPane.showMessageDialog(null, "Member already exists under given NIC");
            return false;
        }  
         
         return true;
         
    }
         
    public boolean validateFields(){
        
        int nicx = 0;
        String nic = txtnic.getText();  
        String vname = "[a-z A-Z]+\\.?";
        String vphone = "^[0-9]{10}$";
        String vaddress = "[a-z A-Z 0-9 , / ,-]+\\.?";
        String voccupation = "[a-z A-Z]+\\.?";
        String verify = "^[0-9]$";

        //validate telephone
        Pattern pphone = Pattern.compile(vphone); // start , combination , total num
        Matcher p = pphone.matcher(txttele.getText());

        //validate name
        Pattern pname = Pattern.compile(vname, Pattern.CASE_INSENSITIVE);
        Matcher n = pname.matcher(txtname.getText());

        // validate address
        Pattern paddress = Pattern.compile(vaddress, Pattern.CASE_INSENSITIVE);
        Matcher a = paddress.matcher(jTextArea1.getText());
        
        // validate occupation
        Pattern poccupation = Pattern.compile(voccupation, Pattern.CASE_INSENSITIVE);
        Matcher o = poccupation.matcher(txtoccu.getText());
        
        
        if (txtname.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "Enter Name ");
            return false;
            
        } else{
            if (n.matches()) 
            {
                //return true;
            } else 
            {
                JOptionPane.showMessageDialog(null, "Name invalid ");
                return false;
            }
        
        }
        if (txtnic.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "Enter NIC");
            return false;
            
        }else{
            
            if (nic.length() == 10)
            {
                
                    String nicn;
                    char nic1 = ' ';
                    char nic2 = ' ';
                    char nic3 = ' ';
                    
                    if (Character.isDigit(nic.charAt(2))){
                    nic1 = nic.charAt(2);
                    }else{
                    JOptionPane.showMessageDialog(null, "Invalid NIC");
                         return false;
                    }
                    if (Character.isDigit(nic.charAt(2))){
                    nic2 = nic.charAt(3);
                    }else{
                    JOptionPane.showMessageDialog(null, "Invalid NIC");
                         return false;
                    }
                    if (Character.isDigit(nic.charAt(2))){
                    nic3 = nic.charAt(4);
                    }else{
                    JOptionPane.showMessageDialog(null, "Invalid NIC");
                         return false;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append(nic1);
                    sb.append(nic2);
                    sb.append(nic3);
                    nicn = sb.toString();

                     nicx =Integer.parseInt(nicn); 
                               
                try 
                {
                    int l = Integer.valueOf(nic.substring(0, 9));
                  //  System.out.println(l);
                } 
                catch (Exception e) 
                {
                    JOptionPane.showMessageDialog(null, "Enter Valid NIC");
                    return false;
                }

                if (nic.charAt(9) == 'V' || nic.charAt(9) == 'v' || nic.charAt(9) == 'x' || nic.charAt(9) == 'X') 
                {
                 
                } else
                {
                    JOptionPane.showMessageDialog(null, "Enter Valid Charactor ");
                    return false;
                }
                   
                    if((nicx >= 367 && nicx <=500)||(nicx >= 867) || nicx == 000){

                        JOptionPane.showMessageDialog(null, "Invalid NIC");
                         return false;
                   }                               
            }
            else
            {
                JOptionPane.showMessageDialog(null, "NIC should be 10 characters long");
                return false;
            }      
        }
        if (txtbday.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, " Enter Birthday ");
            return false;
            
        }
        if (txtgender.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, " Enter Gender ");
            return false;
            
        }
        if (txtoccu.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "Enter Occupation ");
            return false;
            
        }else{
        
               if (o.matches()) 
            {
               // return true;
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Occupation invalid ");
                return false;
            }       
        }
        
        if (txttele.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "Enter Telephone ");
            return false;
            
        }else{
        
             if (p.matches()) 
            {
                //return true;
            } else 
            {
                JOptionPane.showMessageDialog(null, "Phone number invalid ");
                return false;
            }   
        }
        if (jTextArea1.getText().equalsIgnoreCase("")){
            
            JOptionPane.showMessageDialog(null, "Enter Address ");
            return false;
            
        }else{
            
              if (a.matches()) 
            {
               // return true;
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Address invalid ");
                return false;
            }     
        }
        if (combotype.getSelectedItem().toString().equalsIgnoreCase("Select")){
            
            JOptionPane.showMessageDialog(null, "Enter Member Typee ");
            return false;
        }
        
       return true;
    }
    
    public void changeIssueStatus(){
        
        LocalDate today = LocalDate.now();
        
       int month = today.getMonthValue();
       int year = today.getYear();
       
        switch (month) {
            case 1 -> {
                month = 11;
                year = year - 1;
            }
            case 2 -> {
                month = 12;
                year = year -1;
            }
            default -> month = month - 2;
        }
        
        mo = String.format("%02d", month);
        
        String ym = year+"-"+mo;
        
        try
                {
                   
                    String sql = "UPDATE `issue` SET `status`= 'contact' WHERE `issuedate` LIKE '%"+ym+"%' and status = 'Issued'";
                    pst =conn.prepareStatement(sql);
                    pst.execute();
                    
                    rs.close();
                    pst.close();
                    
                }
                catch (Exception e)
                {
                          JOptionPane.showMessageDialog(null, "Failed" + e);
                }
        
    
    }


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btnall;
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btndeleted;
    private javax.swing.JButton btnhistory;
    private javax.swing.JButton btnpending;
    private javax.swing.JButton btnupdate;
    private javax.swing.JComboBox<String> combostatus;
    private javax.swing.JComboBox<String> combotype;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable tblmems;
    private javax.swing.JScrollPane txtaddress;
    private javax.swing.JTextField txtbday;
    private javax.swing.JTextField txtgender;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtnic;
    private javax.swing.JTextField txtoccu;
    private javax.swing.JTextField txtsearch;
    private javax.swing.JTextField txttele;
    // End of variables declaration//GEN-END:variables
}
